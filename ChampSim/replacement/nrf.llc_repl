#include "cache.h"

int No_of_FIFO_Entries[LLC_SET];
uint32_t fifo[LLC_SET][LLC_WAY];


// initialize replacement state
void CACHE::llc_initialize_replacement(){
    cout << "Initialize FIFO state" << endl;

    for(int i = 0; i < LLC_SET; i++)
    {
        for(int j = 0; j < LLC_WAY; j++)
        {
            fifo[i][j] = -1;
        }
        No_of_FIFO_Entries[i] = 0;
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type){

    // find the victim

    if (No_of_FIFO_Entries[set] == LLC_WAY)
    {
        int temp_highscore = No_of_FIFO_Entries[set] - 1;
        int k;
        while(true) {
            for(int i = 0; i < LLC_WAY; i++) {
                if (fifo[set][i] == temp_highscore && block[set][i].used == 0){
                    fifo[set][i] = 0;
                    for (int j = 0; j < i; j++) {
                        fifo[set][j]++;
                    }
                    for (int j = i+1; j < No_of_FIFO_Entries[set] - 1; j++) {
                        fifo[set][j]++;
                    }
                    return i;
                }
                else if (block[set][i].used == 1) {
                    temp_highscore--;
                    break;
                }
            }
                //k = fifo
            for(int i = 0; i < LLC_WAY; i++)
                if (fifo[set][i] == No_of_FIFO_Entries[set] - 1){
                    fifo[set][i] = 0;
                    for (int j = 0; j < i; j++) {
                        fifo[set][j]++;
                    }
                    for (int j = i+1; j < No_of_FIFO_Entries[set] - 1; j++) {
                        fifo[set][j]++;
                    }
                    return i;
                }
            return k;
        }
    }
    
    else 
        for(int i = 0; i < LLC_WAY; i++)
            if (fifo[set][i] == -1){
                fifo[set][i] = No_of_FIFO_Entries[set];
                No_of_FIFO_Entries[set]++;
                return i;
            }

    // baseline LRU
    // return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit){
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    // return lru_update(set, way);
    if(block[set][way].used == 0){
        block[set][way].used = 1 ;
    }
    
}

void CACHE::llc_replacement_final_stats()
{

}