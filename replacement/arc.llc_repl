#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    uint32_t way = 0;
    uint32_t temp_way = NUM_WAY/2;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    uint32_t min=block[set][NUM_WAY/2].lru;
    uint32_t max=block[set][NUM_WAY/2].lru;
    for(int i=NUM_WAY/2;i<NUM_WAY;i++)
    {
        if(min > block[set][i].lru)
        {
            min = block[set][i].lru;
            temp_way = way;
        }
        if(max < block[set][i].lru)
        {
            max = block[set][i].lru;
        }
    }

    // LRU victim
    if (min <= max/10) {
        return temp_way;
    }

    else {
        uint32_t max=block[set][0].lru;
        temp_way = 0;

        for(int i=0;i<NUM_WAY/2;i++)
        {
            if(max < block[set][i].lru)
            {
                max = block[set][i].lru;
                temp_way = max;
            }
        }
        return temp_way;
    }

    return temp_way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    if(type==PREFETCH)
    {
        block[set][way].lru=0;
    }

    if(way < NUM_WAY/2) {
        return lru_update(set, way);
    }
    else {
        block[set][way].lru+=1;
    }
    return;
}

void CACHE::llc_replacement_final_stats()
{

}
